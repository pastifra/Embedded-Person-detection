from tensorflow.keras.models import Model
from tensorflow.keras.layers import BatchNormalization, AveragePooling2D, Conv2D, Reshape, Concatenate, Activation, Input, SeparableConv2D
tf.keras.backend.clear_session()

inp = Input((448,448,3))
x = Conv2D(16, (3, 3), padding="same", strides = (2,2), activation = 'relu', use_bias = False)(inp)
x = BatchNormalization()(x)
x = SeparableConv2D(16, (3, 3), padding="same", activation = 'relu', use_bias = False)(x)
x = BatchNormalization()(x)
x = SeparableConv2D(16, (3, 3), padding="same", activation = 'relu', strides = (2,2), use_bias = False)(x)
x = BatchNormalization()(x)
x = SeparableConv2D(32, (3, 3), padding="same", activation = 'relu', use_bias = False)(x)
x = BatchNormalization()(x)
x = SeparableConv2D(32, (3, 3), padding="same", activation = 'relu', strides = (2,2), use_bias = False)(x)
x = BatchNormalization()(x)
x = SeparableConv2D(64, (3, 3), padding="same", activation = 'relu', use_bias = False)(x)
x = BatchNormalization()(x)
out3= Dense(5, activation = "sigmoid")(x)

x = SeparableConv2D(64, (3, 3), padding="same", activation = 'relu', strides = (2,2), use_bias = False)(x)
x = BatchNormalization()(x)

x = SeparableConv2D(128, (3, 3), padding="same", activation = 'relu', use_bias = False)(x)
x = BatchNormalization()(x)
x = SeparableConv2D(128, (3, 3), padding="same", activation = 'relu', use_bias = False)(x)
x = BatchNormalization()(x)
x = SeparableConv2D(128, (3, 3), padding="same", activation = 'relu', use_bias = False)(x)
x = BatchNormalization()(x)
x = SeparableConv2D(128, (3, 3), padding="same", activation = 'relu', use_bias = False)(x)
x = BatchNormalization()(x)
x = SeparableConv2D(128, (3, 3), padding="same", activation = 'relu', use_bias = False)(x)
x = BatchNormalization()(x)
out2 = Dense(5, activation = "sigmoid")(x)

x = SeparableConv2D(128, (3, 3), padding="same", activation = 'relu', strides = (2,2), use_bias = False)(x)
x = BatchNormalization()(x)
out1 = Dense(5, activation = "sigmoid")(x)

x = SeparableConv2D(256, (3, 3), padding="same", activation = 'relu', strides = (2,2), use_bias = False)(x)
x = BatchNormalization()(x)

x = AveragePooling2D(pool_size=(1, 1), strides=(1,1))(x)

out = Dense(5, activation = "sigmoid")(x)

model = Model(inp,[out,out1,out2,out3])

model.summary()

keras.utils.plot_model(model, "my_model.png", show_shapes=True)